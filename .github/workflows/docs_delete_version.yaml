# Docs Delete Version Workflow
# This workflow automatically deletes documentation versions when version tags are deleted
# It only processes tags matching the pattern v[0-9]+.[0-9]+.[0-9]+ (e.g., v1.0.0, v2.1.3)
# Post-release tags (e.g., v1.0.0.post1) are ignored to avoid conflicts
# Reference documentation:
# - GitHub Actions: https://docs.github.com/en/actions
# - uv package manager: https://docs.astral.sh/uv/
# - MkDocs: https://www.mkdocs.org/
# - Mike: https://github.com/jimporter/mike

name: Docs Delete Version

# Trigger conditions: runs when tags are deleted
on:
  delete:
    # This workflow triggers on any tag deletion, but will only process version tags
    # The actual filtering happens in the job steps using regex pattern matching

jobs:
  delete_version:
    name: Delete docs version on tag removal
    # Only run when a tag is deleted (not branch deletion)
    # Additional version pattern filtering is done in the first step
    if: github.event.ref_type == 'tag'
    # Use Ubuntu 22.04 as the runtime environment
    runs-on: ubuntu-22.04
    
    # Set permissions: need write permissions to update documentation
    permissions:
      contents: write  # Allow writing to repository content
    
    # Concurrency control: ensures multiple workflows on the same tag do not run simultaneously
    concurrency:
      group: ${{ github.workflow }}-${{ github.event.ref }}-delete
      cancel-in-progress: true  # Cancel running identical workflows
    
    steps:
      # Step 1: Check if deleted tag matches version pattern
      # This step uses regex to validate that the deleted tag follows the semantic versioning pattern
      # Only tags like v1.0.0, v2.1.3 will be processed; post-release tags like v1.0.0.post1 are ignored
      - name: Check Tag Pattern
        id: check-tag
        run: |
          if [[ ${{ github.event.ref }} =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "match=true" >> $GITHUB_OUTPUT
            echo "Tag ${{ github.event.ref }} matches version pattern - proceeding with deletion"
          else
            echo "match=false" >> $GITHUB_OUTPUT
            echo "Tag ${{ github.event.ref }} does not match version pattern (v[0-9]+.[0-9]+.[0-9]+) - skipping"
          fi

      # Step 2: Checkout code (only if tag matches version pattern)
      - name: Checkout repository
        if: steps.check-tag.outputs.match == 'true'
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch complete history, some tools may require this

      # Step 3: Setup Python environment (only if tag matches version pattern)
      - name: Setup Python
        if: steps.check-tag.outputs.match == 'true'
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'  # Keep consistent with requirements in pyproject.toml

      # Step 4: Install uv package manager (only if tag matches version pattern)
      # uv is an extremely fast Python package manager written in Rust
      # Compared to pip, uv has significant advantages in dependency resolution and installation speed
      - name: Install uv
        if: steps.check-tag.outputs.match == 'true'
        uses: astral-sh/setup-uv@v4
        with:
          version: "latest"  # Use the latest version of uv
          enable-cache: false  # Disable built-in cache to avoid conflicts with multiple uv.lock files

      # Step 5: Cache uv dependencies (only if tag matches version pattern)
      # Caching can significantly reduce build time, especially for large projects
      - name: Cache uv dependencies
        if: steps.check-tag.outputs.match == 'true'
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/uv
            docs/.venv
          key: ${{ runner.os }}-docs-uv-${{ hashFiles('docs/uv.lock') }}-${{ hashFiles('docs/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-docs-uv-
            ${{ runner.os }}-uv-

      # Step 6: Install dependencies and configure Git (only if tag matches version pattern)
      - name: Install dependencies and configure Git
        if: steps.check-tag.outputs.match == 'true'
        run: |
          cd docs
          uv sync
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      # Step 7: Delete docs version with mike (only if tag matches version pattern)
      # This step removes the documentation version corresponding to the deleted tag
      - name: Delete docs version with mike
        if: steps.check-tag.outputs.match == 'true'
        run: |
          cd docs
          make delete-doc-version version=${{ github.event.ref }}

      # Step 8: Re-point latest alias to highest remaining tag (only if tag matches version pattern)
      # After deleting a version, this step ensures the 'latest' alias points to the highest remaining version
      - name: Re-point latest alias to highest remaining tag (if any)
        if: steps.check-tag.outputs.match == 'true'
        run: |
          set -e
          # Find highest remaining v* tag after deletion
          REMAINING_TAG=$(uv run mike list | sort -V | tail -n 1)
          if [ -z "$REMAINING_TAG" ]; then
            echo "No remaining version tags; skipping latest alias update"
            exit 0
          fi
          echo "Re-pointing latest to ${REMAINING_TAG}"
          cd docs
          make build-doc-version version=$REMAINING_TAG

